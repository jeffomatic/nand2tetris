function Memory.init 1
push constant 2048
pop static 1
push constant 16384
pop static 2
push static 1
pop static 3
push constant 3
pop static 4
push constant 0
pop static 5
push constant 1
pop static 6
push constant 2
pop static 7
push static 5
push static 1
add
push static 2
push static 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 6
push static 1
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 7
push static 1
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Memory.peek 0
push argument 0
push static 0
add
pop pointer 1
push that 0
return
function Memory.poke 0
push argument 0
push static 0
add
push argument 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Memory.alloc 2
push argument 0
push constant 1
add
push static 4
call Math.max 2
pop argument 0
push static 3
pop local 0
push constant 1
neg
pop local 1
label WHILE_EXP0
push local 0
push constant 1
neg
gt
not
if-goto WHILE_END0
push static 5
push local 0
add
pop pointer 1
push that 0
push argument 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push argument 0
call Memory.allocFreeNode 2
return
label IF_FALSE0
push argument 0
push static 5
push local 0
add
pop pointer 1
push that 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 1
push constant 1
neg
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 0
pop local 1
goto IF_END2
label IF_FALSE2
push static 5
push local 0
add
pop pointer 1
push that 0
push static 5
push local 1
add
pop pointer 1
push that 0
lt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 0
pop local 1
label IF_FALSE3
label IF_END2
label IF_FALSE1
push static 7
push local 0
add
pop pointer 1
push that 0
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 1
push constant 1
neg
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 1
neg
return
label IF_FALSE4
push local 1
push argument 0
call Memory.allocFreeNode 2
return
function Memory.allocFreeNode 2
push static 5
push argument 0
add
pop pointer 1
push that 0
push argument 1
push static 4
add
gt
push static 5
push argument 0
add
pop pointer 1
push that 0
push argument 1
push static 4
add
eq
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
push argument 1
add
pop local 0
push static 5
push local 0
add
push static 5
push argument 0
add
pop pointer 1
push that 0
push argument 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 6
push argument 0
add
pop pointer 1
push that 0
pop local 1
push static 6
push local 0
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
neg
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
pop static 3
goto IF_END1
label IF_FALSE1
push static 7
push local 1
add
push local 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END1
push static 7
push argument 0
add
pop pointer 1
push that 0
pop local 1
push static 7
push local 0
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
neg
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push static 6
push local 1
add
push local 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE2
push argument 0
push argument 1
call Memory.prepAllocation 2
return
label IF_FALSE0
push static 6
push argument 0
add
pop pointer 1
push that 0
pop local 1
push local 1
push constant 1
neg
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push static 7
push argument 0
add
pop pointer 1
push that 0
pop static 3
goto IF_END3
label IF_FALSE3
push static 7
push local 1
add
push static 7
push argument 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END3
push static 7
push argument 0
add
pop pointer 1
push that 0
pop local 1
push local 1
push constant 1
neg
gt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push static 6
push local 1
add
push static 6
push argument 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE4
push argument 0
push static 5
push argument 0
add
pop pointer 1
push that 0
call Memory.prepAllocation 2
return
function Memory.prepAllocation 1
push constant 0
push argument 0
add
push argument 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
pop local 0
label WHILE_EXP0
push local 0
push argument 1
lt
not
if-goto WHILE_END0
push local 0
push argument 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push argument 0
push constant 1
add
return
function Memory.deAlloc 1
push argument 0
push constant 1
sub
pop local 0
push static 6
push local 0
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 7
push local 0
add
push static 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 3
push constant 1
neg
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push static 6
push static 3
add
push local 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE0
push local 0
pop static 3
push constant 0
return
