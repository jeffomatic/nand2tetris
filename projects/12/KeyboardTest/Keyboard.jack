// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    static int mmap;

    /** Initializes the keyboard. */
    function void init() {
        let mmap = 24576;
        return;
    }

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return mmap[0];
    }

    /**
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character
     * of the pressed key.
     */
    function char readChar() {
        var char prev, cur;
        while (true) {
            let cur = Keyboard.keyPressed();

            if ((prev > 0) & (cur = 0)) {
                return prev;
            }

            let prev = cur;
        }

        return 0; // unreachable
    }

    /**
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var char c;
        var String buf;

        do Output.printString(message);

        let buf = String.new(32); // for now, assume max length of 32
        while (true) {
            let c = Keyboard.readChar();

            // Check for backspace
            if ((c = 129) & (buf.length() > 0)) {
                do buf.eraseLastChar();
                do Output.backSpace();
            }

            // Check for newline
            if (c = 128) {
                return buf;
            }

            // Check for a valid character
            if (c < 128) {
                do buf.appendChar(c);
                do Output.printChar(c);
            }
        }

        return 0; // unreachable
    }

    /**
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces.
     */
    function int readInt(String message) {
        var String s;
        var boolean neg, done;
        var int begin, end, i, v, base;

        let s = Keyboard.readLine(message);
        if (s.length() = 0) {
            return 0;
        }

        // check for hyphen
        if (s.charAt(0) = 45) {
            let neg = true;
            let begin = 1;
            let end = 1;
        }

        // stop iterating when we hit a non-number
        while (end < s.length()) {
            if (~done) {
                if ((47 < s.charAt(end)) & (s.charAt(end) < 58)) {
                    let end = end + 1;
                } else {
                    let done = true;
                }
            }
        }
        let end = end - 1;

        let base = 1;
        let i = end;
        while ((i > begin) | (i = begin)) {
            let v = v + (base * (s.charAt(i) - 48));
            let base = base * 10;
            let i = i - 1;
        }

        if (neg) {
            let v = -v;
        }

        return v;
    }
}
