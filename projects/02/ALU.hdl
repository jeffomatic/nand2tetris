// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

    Mux16(a = x, b = false, sel = zx, out = MaybeZeroedX);
    Mux16(a = y, b = false, sel = zy, out = MaybeZeroedY);

    Not16(in = MaybeZeroedX, out = NegatedMaybeZeroedX);
    Not16(in = MaybeZeroedY, out = NegatedMaybeZeroedY);
    Mux16(a = MaybeZeroedX, b = NegatedMaybeZeroedX, sel = nx, out = ProcessedX);
    Mux16(a = MaybeZeroedY, b = NegatedMaybeZeroedY, sel = ny, out = ProcessedY);

    And16(a = ProcessedX, b = ProcessedY, out = XAndY);
    Add16(a = ProcessedX, b = ProcessedY, out = XAddY);

    // Bitwise-and or addition
    Mux16(a = XAndY, b = XAddY, sel = f, out = OpResult);

    // Output negation
    Not16(in = OpResult, out = NotOpResult);
    Mux16(
        a = OpResult,
        b = NotOpResult,
        sel = no,

        // Operation result
        out = out,
        
        // Negative bit
        out[15] = ng,
        
        // Prep for zero check
        out[0..7] = OutFront8,
        out[8..15] = OutBack8
    );

    // Zero check
    Or8Way(in = OutFront8, out = OrFront8);
    Or8Way(in = OutBack8, out = OrBack8);
    Or(a = OrFront8, b = OrBack8, out = NotZero);
    Not(in = NotZero, out = zr);
}
