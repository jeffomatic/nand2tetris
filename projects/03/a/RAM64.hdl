// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:

    // Sub-RAMs

    RAM8(in = in, load = Ram000Load, address=address[0..2], out = Ram000);
    RAM8(in = in, load = Ram001Load, address=address[0..2], out = Ram001);
    RAM8(in = in, load = Ram010Load, address=address[0..2], out = Ram010);
    RAM8(in = in, load = Ram011Load, address=address[0..2], out = Ram011);
    RAM8(in = in, load = Ram100Load, address=address[0..2], out = Ram100);
    RAM8(in = in, load = Ram101Load, address=address[0..2], out = Ram101);
    RAM8(in = in, load = Ram110Load, address=address[0..2], out = Ram110);
    RAM8(in = in, load = Ram111Load, address=address[0..2], out = Ram111);

    // Load bit demultiplexing

    DMux8Way(
      in = load,
      sel = address[3..5],
      a = Ram000Load,
      b = Ram001Load,
      c = Ram010Load,
      d = Ram011Load,
      e = Ram100Load,
      f = Ram101Load,
      g = Ram110Load,
      h = Ram111Load
    );
    
    // Output multiplexing

    Mux8Way16(
      a = Ram000,
      b = Ram001,
      c = Ram010,
      d = Ram011,
      e = Ram100,
      f = Ram101,
      g = Ram110,
      h = Ram111,      
      sel = address[3..5],
      out = out
    );

}
