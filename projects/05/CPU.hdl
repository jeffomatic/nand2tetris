// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    /*

    a:
        0: AOrM is A
        1: AOrM is M
    c1 (ALU zx bit, always D)
    c2 (ALU nx bit)
    c3 (ALU zy bit, always AOrM)
    c4 (ALU ny bit)
    c5 (ALU f bit)
    c6 (ALU no bit)

    */

    // Is this an a-instruction?
    Not(
        in = instruction[15],
        out = IsAInstruction
    );

    // a-bit: use explicit A register value, or memory value
    Mux16(
        a = RegAValue,
        b = inM,
        sel = instruction[12],
        out = AOrM
    );

    // If bit 3 of a c-instruction is set, memory should be updated.
    And(
        a = instruction[15],
        b = instruction[3], // dest: M
        out = writeM
    );
    
    // A register
    ARegister(
        in = RegAIn,
        load = RegALoad,
        out = RegAValue,
        out[0..14] = addressM
    );

    // Register A should be updated if:
    // - this is an a-instruction.
    // - bit 5 is set in a c-instruction.
    Or(
        a = IsAInstruction, // a-instruction
        b = instruction[5], // dest: A
        out = RegALoad
    );

    // Register A takes the value of:
    // - an instruction literal, if this is an a-instruction.
    // - the c-instruction result, if this is a c-instruction.
    Mux16(
        a[0..14] = instruction[0..14],
        b = ALUResult,
        sel = instruction[15],
        out = RegAIn
    );

    // D register
    DRegister(
        in = ALUResult,
        load = RegDLoad,
        out = RegDValue
    );

    And(
        a = instruction[15],
        b = instruction[4], // dest: D
        out = RegDLoad
    );

    // ALU
    ALU(
        x = RegDValue,
        y = AOrM,
        zx = instruction[11],
        nx = instruction[10],
        zy = instruction[9],
        ny = instruction[8],
        f = instruction[7],
        no = instruction[6],
        out = ALUResult,
        out = outM,
        zr = ALUZero,
        ng = ALUNegative
    );

    // PC register
    PC(
        reset = reset,
        load = ShouldJump,
        inc = true,
        in = RegAValue,
        out[0..14] = pc
    );

    /*
    ShouldJump = instruction[0] && (
        (j2 && ALUZero) ||
        (j1 && ALUNegative) ||
        (j3 && !ALUNegative)
    )
    */

    Not(in = ALUNegative, out = ALUNotNegative);
    Not(in = ALUZero, out = ALUNotZero);
    And(a = ALUNotNegative, b = ALUNotZero, out = ALUPositive);
    And(a = instruction[2], b = ALUNegative, out = JumpNegative);
    And(a = instruction[1], b = ALUZero, out = JumpZero);
    And(a = instruction[0], b = ALUPositive, out = JumpPositive);
    Or(a = JumpNegative, b = JumpZero, out = PreJump1);
    Or(a = PreJump1, b = JumpPositive, out = PreJump2);
    And(a = PreJump2, b = instruction[15], out = ShouldJump);

}
